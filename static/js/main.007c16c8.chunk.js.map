{"version":3,"sources":["store/index.ts","components/User.tsx","components/Todo.tsx","components/TodoList.tsx","components/api.ts","App.tsx","index.tsx"],"names":["isLoading","state","loading","getData","todos","getLoaded","loaded","initialState","store","createStore","action","type","sort","a","b","title","localeCompare","Number","completed","user","name","filter","item","id","composeWithDevTools","User","Todo","todo","deleteItem","checked","readOnly","onClick","TodoList","dispatch","useDispatch","useSelector","deleteI","className","map","key","URL","fetch","then","response","json","loadTodosWithUsers","users","data","find","userId","App","isLoaded","dataIsLoading","handleButtonClick","disabled","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.007c16c8.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { Todo, PreparedTodo } from '../components/types';\n\n// Action types - is just a constant. MUST have a unique value.\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\nconst DATA_LOADING = 'DATA_LOADING';\nconst DATA_SORT_TITLE = 'DATA_SORT_TITLE';\nconst DATA_SORT_COMPLETED = 'DATA_SORT_COMPLETED';\nconst DATA_SORT_NAME = 'DATA_SORT_NAME';\nconst DELETE_ITEM = 'DELETE_ITEM';\n\n// Action creators - a function returning an action object\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\nexport const dataLoading = (todos: Todo[]) => ({ type: DATA_LOADING, todos });\nexport const dataSortTitle = (() => ({ type: DATA_SORT_TITLE }));\nexport const dataSortCompleted = (() => ({ type: DATA_SORT_COMPLETED }));\nexport const dataSortName = (() => ({ type: DATA_SORT_NAME }));\nexport const deleteItem = ((id: number) => ({ type: DELETE_ITEM, id }));\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const isLoading = (state: RootState) => state.loading;\nexport const getData = (state: RootState) => state.todos;\nexport const getLoaded = (state: RootState) => state.loaded;\n\n// Initial state\nexport type RootState = {\n  loading: boolean;\n  loaded: boolean;\n  todos: PreparedTodo[];\n};\n\nconst initialState: RootState = {\n  loading: false,\n  loaded: false,\n  todos: [],\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return { ...state, loading: true };\n\n    case FINISH_LOADING:\n      return {\n        ...state,\n        loading: false,\n        loaded: true,\n      };\n\n    case DATA_LOADING:\n      return {\n        ...state,\n        todos: action.todos,\n      };\n\n    case DATA_SORT_TITLE:\n\n      return {\n        ...state,\n        todos: [...state.todos].sort((a, b) => a.title.localeCompare(b.title)),\n      };\n\n    case DATA_SORT_COMPLETED:\n      return {\n        ...state,\n        todos: [...state.todos].sort((a: Todo, b: Todo) => {\n          return Number(a.completed) - Number(b.completed);\n        }),\n      };\n\n    case DATA_SORT_NAME:\n      return {\n        ...state,\n        todos: [...state.todos].sort((a, b) => {\n          if (a.user && b.user) {\n            return a.user.name.localeCompare(b.user.name);\n          }\n\n          return 0;\n        }),\n      };\n\n    case DELETE_ITEM:\n      return {\n        ...state,\n        todos: [...state.todos].filter(item => item.id !== action.id),\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","import React from 'react';\nimport { UserProps } from './types';\n\nexport const User: React.FC<UserProps> = ({ name }) => (\n  <td>{name}</td>\n);\n","import React from 'react';\nimport { User } from './User';\nimport { PreparedTodo } from './types';\n\ninterface Props {\n  deleteItem: (id: number) => void;\n  todo: PreparedTodo;\n}\n\nexport const Todo:\nReact.FC<Props> = ({ todo, deleteItem }) => (\n\n  <tr>\n    <td>\n      <input\n        type=\"checkbox\"\n        name=\"input\"\n        id=\"input\"\n        checked={todo.completed}\n        readOnly\n      />\n    </td>\n    <td>{todo.title}</td>\n    <User name={todo.user ? todo.user.name : 'user is not found'} />\n    <td>\n      <button\n        onClick={() => deleteItem(todo.id)}\n        type=\"button\"\n      >\n        delete\n      </button>\n    </td>\n  </tr>\n);\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Todo } from './Todo';\nimport { getData, deleteItem as deleteI } from '../store';\n\nconst TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector(getData);\n\n  const deleteItem = (id: number) => {\n    dispatch(deleteI(id));\n  };\n\n  return (\n    <>\n      <table className=\"table\">\n        <caption><strong>ToDo List</strong></caption>\n        <thead>\n          <tr>\n            <th>Status</th>\n            <th>Title</th>\n            <th>User</th>\n          </tr>\n        </thead>\n        <tbody>\n          {todos.map(item => (\n            <Todo\n              deleteItem={deleteItem}\n              todo={item}\n              key={item.id}\n            />\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nexport default TodoList;\n","import { User, Todo, PreparedTodo } from './types';\n\nconst API_USERS = 'https://mate.academy/students-api/users';\nconst API_TODOS = 'https://mate.academy/students-api/todos';\n\nconst getData = (URL: string) => (\n  fetch(URL).then(response => response.json())\n);\n\nexport const loadTodosWithUsers = async (): Promise<PreparedTodo[]> => {\n  const users = await getData(API_USERS);\n  const todos = await getData(API_TODOS);\n\n  return todos.data.map((todo: Todo) => ({\n    ...todo,\n    user: users.data.find((user: User) => user.id === todo.userId),\n  }));\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './App.scss';\nimport {\n  dataLoading,\n  dataSortTitle,\n  dataSortCompleted,\n  dataSortName,\n  startLoading,\n  finishLoading,\n  getLoaded,\n  isLoading as dataIsLoading,\n} from './store';\nimport TodoList from './components/TodoList';\nimport { loadTodosWithUsers } from './components/api';\n\nconst App: React.FC = () => {\n  const isLoaded = useSelector(getLoaded);\n  const isLoading = useSelector(dataIsLoading);\n\n  const dispatch = useDispatch();\n\n  const handleButtonClick = async () => {\n    dispatch(startLoading());\n\n    await loadTodosWithUsers().then(data => {\n      dispatch(dataLoading(data));\n    });\n\n    dispatch(finishLoading());\n  };\n\n  const sortByTitle = () => {\n    dispatch(dataSortTitle());\n  };\n\n  const sortByCompleted = () => {\n    dispatch(dataSortCompleted());\n  };\n\n  const sortByName = () => {\n    dispatch(dataSortName());\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Static list of todos</h1>\n      {!isLoaded ? (\n        <>\n          <button\n            type=\"button\"\n            onClick={handleButtonClick}\n            disabled={isLoading}\n          >\n            {isLoading ? 'loading...' : 'Load'}\n          </button>\n        </>\n      ) : (\n        <>\n          <div className=\"controls\">\n            <button type=\"button\" className=\"controls__button\" onClick={sortByTitle}>Sort by Title</button>\n            <button type=\"button\" onClick={sortByCompleted}>Sort by Completed</button>\n            <button type=\"button\" onClick={sortByName}>Sort by Name</button>\n          </div>\n          <div className=\"content\">\n            <TodoList />\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}